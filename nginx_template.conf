worker_processes 2;
user nobody nogroup;

error_log  /var/nginx/error.log warn;
pid /var/nginx/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/nginx/access.log combined;
  sendfile on;

  ssl_session_cache   shared:SSL:10m;
  ssl_session_timeout 10m;

  upstream app_server {
    server webserver:8080 fail_timeout=0;
  }

  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80 default_server;
    return 444;
  }

  server {
    # Redirect http to https
    listen 80 default_server;
    server_name localhost;
    return 301 https://localhost$request_uri;
  }

  server {
    listen              443 ssl;
    ssl_certificate     /SSL/cert.pem;
    ssl_certificate_key /SSL/key.pem;
    keepalive_timeout   70s;
    server_name localhost;
    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }
    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }

    error_page 500 502 503 504 /500.html;
  }
}
